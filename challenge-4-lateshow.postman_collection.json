{
  "info": {
    "_postman_id": "d4d3f7a7-8e9d-4f5a-9c3b-6a1c8f9e5d2a",
    "name": "LateShow API - Challenge 4",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Auth",
      "item": [
        {
          "name": "Register User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser\",\n  \"password\": \"TestPassword123!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/register",
              "host": ["{{base_url}}"],
              "path": ["register"]
            }
          },
          "response": []
        },
        {
          "name": "Login User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser\",\n  \"password\": \"TestPassword123!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/login",
              "host": ["{{base_url}}"],
              "path": ["login"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Guests",
      "item": [
        {
          "name": "List All Guests",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/guests",
              "host": ["{{base_url}}"],
              "path": ["guests"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Episodes",
      "item": [
        {
          "name": "List All Episodes",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/episodes",
              "host": ["{{base_url}}"],
              "path": ["episodes"]
            }
          },
          "response": []
        },
        {
          "name": "Get Single Episode",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/episodes/1",
              "host": ["{{base_url}}"],
              "path": ["episodes", "1"]
            }
          },
          "response": []
        },
        {
          "name": "Delete Episode (Auth Required)",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/episodes/1",
              "host": ["{{base_url}}"],
              "path": ["episodes", "1"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Appearances",
      "item": [
        {
          "name": "Create Appearance (Auth Required)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"rating\": 4,\n  \"guest_id\": 1,\n  \"episode_id\": 1\n}"
            },
            "url": {
              "raw": "{{base_url}}/appearances",
              "host": ["{{base_url}}"],
              "path": ["appearances"]
            }
          },
          "response": []
        },
        {
          "name": "Create Invalid Appearance (Rating Validation)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"rating\": 6,\n  \"guest_id\": 1,\n  \"episode_id\": 1\n}"
            },
            "url": {
              "raw": "{{base_url}}/appearances",
              "host": ["{{base_url}}"],
              "path": ["appearances"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Edge Cases",
      "item": [
        {
          "name": "Register Existing User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser\",\n  \"password\": \"TestPassword123!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/register",
              "host": ["{{base_url}}"],
              "path": ["register"]
            }
          },
          "response": []
        },
        {
          "name": "Login Invalid Credentials",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser\",\n  \"password\": \"WrongPassword\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/login",
              "host": ["{{base_url}}"],
              "path": ["login"]
            }
          },
          "response": []
        },
        {
          "name": "Get Non-existent Episode",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/episodes/999",
              "host": ["{{base_url}}"],
              "path": ["episodes", "999"]
            }
          },
          "response": []
        },
        {
          "name": "Create Appearance with Invalid IDs",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"rating\": 3,\n  \"guest_id\": 999,\n  \"episode_id\": 999\n}"
            },
            "url": {
              "raw": "{{base_url}}/appearances",
              "host": ["{{base_url}}"],
              "path": ["appearances"]
            }
          },
          "response": []
        },
        {
          "name": "Delete Episode Without Auth",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/episodes/1",
              "host": ["{{base_url}}"],
              "path": ["episodes", "1"]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:5000"
    },
    {
      "key": "token",
      "value": ""
    }
  ],
  "event": [
    {
      "listen": "test",
      "script": {
        "exec": [
          "// Set token after successful login",
          "if (pm.response.code === 200 && pm.request.url.toString().includes('/login')) {",
          "    var jsonData = pm.response.json();",
          "    pm.collectionVariables.set('token', jsonData.access_token);",
          "    pm.test('Token saved successfully', function() {",
          "        pm.expect(jsonData.access_token).to.be.a('string');",
          "    });",
          "}",
          "",
          "// Common test: Check for 2xx status",
          "pm.test('Status code is successful', function() {",
          "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
          "});",
          "",
          "// Test for specific endpoints",
          "if (pm.request.url.toString().includes('/guests') && pm.response.code === 200) {",
          "    pm.test('Guests response is valid', function() {",
          "        var jsonData = pm.response.json();",
          "        pm.expect(jsonData).to.be.an('array');",
          "        pm.expect(jsonData[0]).to.have.keys(['id', 'name', 'occupation']);",
          "    });",
          "}",
          "",
          "if (pm.request.url.toString().includes('/episodes') && pm.response.code === 200) {",
          "    pm.test('Episodes response is valid', function() {",
          "        var jsonData = pm.response.json();",
          "        pm.expect(jsonData).to.be.an('array');",
          "        pm.expect(jsonData[0]).to.have.keys(['id', 'date', 'number']);",
          "    });",
          "}",
          "",
          "if (pm.request.url.toString().includes('/episodes/') && pm.response.code === 200) {",
          "    pm.test('Single episode response is valid', function() {",
          "        var jsonData = pm.response.json();",
          "        pm.expect(jsonData).to.be.an('object');",
          "        pm.expect(jsonData).to.have.keys(['id', 'date', 'number', 'appearances']);",
          "        pm.expect(jsonData.appearances).to.be.an('array');",
          "    });",
          "}",
          "",
          "// Test for error responses",
          "if (pm.response.code === 400) {",
          "    pm.test('Bad request response', function() {",
          "        var jsonData = pm.response.json();",
          "        pm.expect(jsonData).to.have.property('error');",
          "    });",
          "}",
          "",
          "if (pm.response.code === 401) {",
          "    pm.test('Unauthorized response', function() {",
          "        var jsonData = pm.response.json();",
          "        pm.expect(jsonData).to.have.property('error');",
          "    });",
          "}",
          "",
          "if (pm.response.code === 404) {",
          "    pm.test('Not found response', function() {",
          "        var jsonData = pm.response.json();",
          "        pm.expect(jsonData).to.have.property('error');",
          "    });",
          "}",
          "",
          "if (pm.response.code === 409) {",
          "    pm.test('Conflict response', function() {",
          "        var jsonData = pm.response.json();",
          "        pm.expect(jsonData).to.have.property('error');",
          "    });",
          "}"
        ],
        "type": "text/javascript"
      }
    }
  ]
}